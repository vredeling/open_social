################################################################################
# The base Open Social schema                                                  #
#                                                                              #
# This file contains the basis of the Open Social GraphQL API Schema. It       #
# provides base types that can be used by individual Open Social features.     #
# Additionally it contains common interfaces for things such as pagination.    #
#                                                                              #
# Comments aimed at schema developers are prefixed with `#` and comments       #
# exposed to schema consumers are contained in `"""`.                          #
#                                                                              #
# If you're new to GraphQL I recommend starting at: https://graphql.org/learn/ #
################################################################################

"""
The schema's entry-point for queries. This acts as the public, top-level API
from which all queries must start.
"""
type Query

# The actual GraphQL schema
schema {
  query: Query
}

################################################################################
#                                Basic Types                                   #
################################################################################
"""
An access role for a user

Roles are used to assign groups of permissions to users on the platform.
"""
scalar UserRole

"""
A valid email address.
"""
scalar Email

"""
A valid URL
"""
scalar Url

"""
A phone number.
"""
# For now we treat PhoneNumber as a special string but we may want to build it
# out to a proper type containing an country code and local number separately.
scalar PhoneNumber

# TODO: Add descriptions.
scalar TimeZone
scalar Language

"""
An address that provides information about a location.

The fields in an address depend on the country.
"""
type Address {
  """
  The two-letter contry code.

  This is a CLDR country code, since CLDR includes additional countries
  for addressing purposes, such as Canary Islands (IC).
  """
  country_code: String!
  """
  The administrative area.

  Called the "state" in the United States, "province" in France and Italy
  "county" in Great Britain, "prefecture" in Japan, etc.
  """
  administrative_area: String
  """
  The locality (i.e city).

  Some countries do not use this field; their address lines are sufficient
  to locate an address within a sub-administrative area.
  """
  locality: String
  """
  The dependent locality (i.e neighbourhood).

  When representing a double-dependent locality in Great Britain, includes
  both the double-dependent locality and the dependent locality,
  e.g. "Whaley, Langwith".
  """
  dependent_locality: String
  """
  The postal code.

  The value is often alphanumeric.
  """
  postal_code: String
  """
  The sorting code.

  For example, CEDEX in France.
  """
  sorting_code: String
  """
  The first line of address block.
  """
  address_line_1: String
  """
  The second line of the address block.
  """
  address_line_2: String
  """
  The organization.
  """
  organization: String
}

"""
A locale object contains internationalisation settings.

Think about things such as language, timezone and country preferences. This is
used in user preferences but can also be used in data or platform settings.
"""
type Locale {
  country: String
  language: Language
  timezone: TimeZone
}

"""
A longer string of text that may contain markup.
"""
type FormattedText {
  """
  The text format used by Open Social to process the input text.

  A text format provides information about what markup is allowed in the text.
  """
  format: TextFormat!
  """
  The raw string as used by an editor.
  """
  raw: String!
  """
  The string processed according to the text format.

  For a properly configured text format this string should be save to display
  to users.
  """
  processed: String!
}

"""
An Open Social text format.
"""
# Declared as separate type so that individual configurations may be exposed
# in the future if needed.
type TextFormat {
  """
  The machine name of the text format.
  """
  name: String!
#  """
#  The human readable name of the text format.
#  """
#  label: String!
}

################################################################################
#                         Data Fetching Interfaces                             #
#                                                                              #
# All data fetching operations in Open Social should implement the Relay       #
# Connection specification: https://relay.dev/graphql/connections.htm          #
################################################################################
"""
A cursor for use in pagination.
"""
scalar Cursor

"""
A node on an edge.
"""
interface Node {
  uuid: ID!
}

"""
An edge in a connection.

Provides the cursor to fetch data based on the position of the associated node.
Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: Node!
}

# PageInfo deviates from the current Relay spec as in the spec the
# start-/endCursor fields may not be null. However, this is impractical because
# it does not account for empty results.
# See: https://github.com/facebook/relay/pull/2655
"""
Information about the page in a connection.
"""
type PageInfo {
  """
  Whether there are more pages in this connection.
  """
  hasNextPage: Boolean!
  """
  Whether there  are previous pages in this connection.
  """
  hasPreviousPage: Boolean!
  """
  The cursor for the first element in this page
  """
  startCursor: Cursor
  """
  The cursor for the last element in this page
  """
  endCursor: Cursor
}

"""
A paginated set of results.
"""
interface Connection {
  """
  A list of edges
  """
  edges: [Edge!]!
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
}


################################################################################
#                         Data Creation Interfaces                             #
################################################################################
# """
# The base mutation type.
# """
# type Mutation

"""
A violation indicates an error in the GraphQL query or other incorrect
circumstances such as missing permissions.
"""
scalar Violation

"""
The base GraphQL Response class
"""
interface Response {
  errors: [Violation]
}

